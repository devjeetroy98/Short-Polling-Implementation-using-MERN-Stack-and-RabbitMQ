version: '3'

services:
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    ports:
      - 2717:27017
    volumes:
      - ./dev-datastore:/data/db
    networks:
      - mynet
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - mynet
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  api-gateway:
    container_name: api-gateway
    build: "./api-gateway"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - DB_URI=mongodb://mongo:27017/todoDB
      - AMQP_URL=amqp://guest:guest@rabbitmq
    restart: on-failure
    networks:
      - mynet
    depends_on:
      - backend

  backend:
    container_name: backend
    build: "./backend"
    environment:
      - PORT=8080
      - DB_URI=mongodb://mongo:27017/todoDB
      - AMQP_URL=amqp://guest:guest@rabbitmq
    restart: on-failure
    networks:
      - mynet
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  webapp:
    container_name: webapp
    build: "./frontend"
    ports:
      - 3000:5173
    restart: on-failure
    networks:
      - mynet
    depends_on:
      - api-gateway

networks:
  mynet:
    driver: bridge
